package com.springsecurity.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.springsecurity.filters.JwtRequestFilter;

@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
	@Autowired
	private UserDetailsService userDetailsService;
	@Autowired
	private PasswordEncoder getPassWordEncoder;
	@Autowired
	private JwtRequestFilter jwtRequestFilter;

	@Bean
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//		auth.inMemoryAuthentication()
//		.withUser("admin")
//		.password(getPassWordEncoder.encode("admin"))
//		.roles("ADMIN");
		auth.userDetailsService(userDetailsService);
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		// TODO Auto-generated method stub
		http.csrf().disable().
		cors().disable().
		authorizeRequests()
		
////	.antMatchers("/security/admin/**").hasRole("ADMIN")
//	//	.antMatchers("/security/**").hasRole("ADMIN")
//	.antMatchers("/security/user/**").permitAll()
				.antMatchers("/security/user/**").hasAnyAuthority("ROLE_ADMIN", "ROLE_USER")
				.antMatchers("/traindetails/s/{train_name}").permitAll()
				.antMatchers("/security/createUser").permitAll().antMatchers("/security/authenticate").permitAll()

//				.antMatchers("/security/user/**").permitAll()
			.antMatchers("/security/admin/**").hasAuthority("ROLE_ADMIN")
//		.antMatchers("/security/admin/**").permitAll()
				// .antMatchers("/security/user/**").hasAuthority("ROLE_USER")

				.anyRequest().authenticated().and().exceptionHandling().and().sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS);

		http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
	}
}
